# Localova Visual Search API Documentation

This document provides comprehensive details about the Localova Visual Search API, which powers the visual similarity search functionality for the Localova furniture platform.

## Base URL

psaj-localova-production.up.railway.app

## Authentication

Currently, the API uses CORS restrictions to limit access to authorized domains. No additional authentication is required.

## Endpoints

### 1. Search by Image URL

Find visually similar products by providing an image URL.

**Endpoint**: `/api/search/url`

**Method**: POST

**Content-Type**: application/json

**Request Body**:

```json
{
  "imageUrl": "https://example.com/path/to/image.jpg",
  "limit": 8,
  "threshold": 0.2
}
```

**Parameters**:

| Parameter  | Type    | Required | Default | Description |
|------------|---------|----------|---------|-------------|
| imageUrl   | string  | Yes      | -       | URL of the image to search for similar products |
| limit      | number  | No       | 8       | Maximum number of results to return |
| threshold  | number  | No       | 0.2     | Minimum similarity score (0-1) for results |

**Response**:

```json
{
  "results": [
    {
      "id": "product123",
      "name": "Elegant Sofa",
      "price": 1299.99,
      "imageURL": "https://example.com/sofa.jpg",
      "category": "Sofas",
      "productURL": "https://psaj-localova.vercel.app/product-details/product123",
      "similarity": "0.875"
    },
    // Additional similar products...
  ],
  "metrics": {
    "averageSimilarity": "0.732",
    "adaptiveThreshold": "0.425",
    "categoryCoverage": 3
  }
}
```

### 2. Search by Image Upload

Find visually similar products by uploading an image file.

**Endpoint**: `/api/search/upload`

**Method**: POST

**Content-Type**: multipart/form-data

**Request Body**:

| Parameter  | Type    | Required | Description |
|------------|---------|----------|-------------|
| image      | file    | Yes      | Image file to upload and search for similar products |
| limit      | number  | No       | Maximum number of results to return (default: 5) |
| threshold  | number  | No       | Minimum similarity score (0-1) for results (default: 0.2) |

**Response**:

```json
{
  "results": {
    "items": [
      {
        "id": "product456",
        "name": "Modern Coffee Table",
        "price": 499.99,
        "imageURL": "https://example.com/table.jpg",
        "category": "Tables",
        "productURL": "https://psaj-localova.vercel.app/product-details/product456",
        "similarity": "0.812"
      },
      // Additional similar products...
    ],
    "metrics": {
      "averageSimilarity": "0.695",
      "adaptiveThreshold": "0.380",
      "categoryCoverage": 2
    }
  }
}
```

### 3. Simple Search by URL (Frontend Processing)

Get all products to process similarity on the frontend. Useful for environments where TensorFlow.js is not available on the server.

**Endpoint**: `/api/search/url/simple`

**Method**: POST

**Content-Type**: application/json

**Request Body**:

```json
{
  "imageUrl": "https://example.com/path/to/image.jpg"
}
```

**Parameters**:

| Parameter  | Type    | Required | Description |
|------------|---------|----------|-------------|
| imageUrl   | string  | Yes      | URL of the image to search for similar products |

**Response**:

```json
{
  "imageUrl": "https://example.com/path/to/image.jpg",
  "products": [
    {
      "id": "product789",
      "name": "Luxury Dining Chair",
      "price": 349.99,
      "imageURL": "https://example.com/chair.jpg",
      "productURL": "https://psaj-localova.vercel.app/product-details/product789"
    },
    // Additional products...
  ]
}
```

## Chrome Extension Integration

### Searching by Selected Area

To implement the "search by selected area" in your Chrome extension, the recommended approach is to use a background script:

#### 1. Content Script (runs on web pages)

```javascript
// Capture the selected area of the page
function captureSelectedArea(selectedRect) {
  // Use browser APIs to capture screenshot
  chrome.runtime.sendMessage({
    type: 'CAPTURE_AND_SEARCH',
    rect: selectedRect
  }, function(response) {
    // Handle and display search results
    showSearchResults(response);
  });
}
```

#### 2. Background Script (runs in extension context)

```javascript
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.type === 'CAPTURE_AND_SEARCH') {
    // Capture the visible area of the tab
    chrome.tabs.captureVisibleTab(null, {format: 'png'}, (dataUrl) => {
      // Convert dataUrl to Blob
      fetch(dataUrl)
        .then(res => res.blob())
        .then(blob => {
          // Create FormData and append the image
          const formData = new FormData();
          formData.append('image', blob, 'selected-area.png');
          
          // Send to your API
          return fetch('https://psaj-localova-production.up.railway.app/api/search/upload', {
            method: 'POST',
            body: formData
          });
        })
        .then(response => response.json())
        .then(data => {
          sendResponse(data);
        })
        .catch(error => {
          console.error('Error:', error);
          sendResponse({error: error.message});
        });
    });
    
    return true; // Required for async sendResponse
  }
});
```

This approach ensures your extension works correctly regardless of which website it's used on, as the API requests come from the extension's background context.

1. Capture a screenshot of the selected area using Chrome's `chrome.tabs.captureVisibleTab` API
2. Convert the screenshot to a Blob or File object
3. Create a FormData object and append the image file
4. Send the FormData to the `/api/search/upload` endpoint

**Example Code (JavaScript)**:

```javascript
async function searchBySelectedArea(imageBlob) {
  const formData = new FormData();
  formData.append('image', imageBlob, 'selected-area.png');
  
  try {
    const response = await fetch('https://your-railway-app-url.railway.app/api/search/upload', {
      method: 'POST',
      body: formData
    });
    
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error searching by selected area:', error);
    throw error;
  }
}
```

## Error Handling

The API returns appropriate HTTP status codes for different error scenarios:

| Status Code | Description |
|-------------|-------------|
| 200         | Success     |
| 400         | Bad Request - Missing required parameters or invalid input |
| 500         | Internal Server Error - Server-side processing error |

Error responses follow this format:

```json
{
  "error": "Error message describing what went wrong"
}
```

## Rate Limiting

There are currently no rate limits implemented, but excessive usage may be monitored and restricted in the future.

## Technical Details

The API uses TensorFlow.js with MobileNet V3 (with fallback to V1) for feature extraction. Images are processed as follows:

1. The image is resized to 224x224 pixels
2. Image features are extracted using the MobileNet model
3. Similarity is calculated using an enhanced cosine similarity algorithm
4. Results are filtered based on an adaptive threshold

## Support

For technical support or questions about the API, please contact the development team.

---

Last updated: [Current Date]