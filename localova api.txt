# Localova Visual Search API Documentation

This document provides comprehensive details about the Localova Visual Search API, which powers the visual similarity search functionality for the Localova furniture platform.

## Base URL

psaj-localova-production.up.railway.app

## Authentication

Currently, the API uses CORS restrictions to limit access to authorized domains. No additional authentication is required.

## Endpoints

### 1. Search by Image URL

Find visually similar products by providing an image URL.

**Endpoint**: `/api/search/url`

**Method**: POST

**Content-Type**: application/json

**Request Body**:

```json
{
  "imageUrl": "https://example.com/path/to/image.jpg",
  "limit": 8,
  "threshold": 0.2
}
```

**Parameters**:

| Parameter  | Type    | Required | Default | Description |
|------------|---------|----------|---------|-------------|
| imageUrl   | string  | Yes      | -       | URL of the image to search for similar products |
| limit      | number  | No       | 8       | Maximum number of results to return |
| threshold  | number  | No       | 0.2     | Minimum similarity score (0-1) for results |

**Response**:

```json
{
  "results": [
    {
      "id": "product123",
      "name": "Elegant Sofa",
      "price": 1299.99,
      "imageURL": "https://example.com/sofa.jpg",
      "category": "Sofas",
      "productURL": "https://psaj-localova.vercel.app/product-details/product123",
      "similarity": "0.875"
    },
    // Additional similar products...
  ],
  "metrics": {
    "averageSimilarity": "0.732",
    "adaptiveThreshold": "0.425",
    "categoryCoverage": 3
  }
}
```

### 2. Search by Image Upload

Find visually similar products by uploading an image file.

**Endpoint**: `/api/search/upload`

**Method**: POST

**Content-Type**: multipart/form-data

**Request Body**:

| Parameter  | Type    | Required | Description |
|------------|---------|----------|-------------|
| image      | file    | Yes      | Image file to upload and search for similar products |
| limit      | number  | No       | Maximum number of results to return (default: 5) |
| threshold  | number  | No       | Minimum similarity score (0-1) for results (default: 0.2) |

**Response**:

```json
{
  "results": {
    "items": [
      {
        "id": "product456",
        "name": "Modern Coffee Table",
        "price": 499.99,
        "imageURL": "https://example.com/table.jpg",
        "category": "Tables",
        "productURL": "https://psaj-localova.vercel.app/product-details/product456",
        "similarity": "0.812"
      },
      // Additional similar products...
    ],
    "metrics": {
      "averageSimilarity": "0.695",
      "adaptiveThreshold": "0.380",
      "categoryCoverage": 2
    }
  }
}
```

### 3. Search with Pre-extracted Features

Search for products using pre-extracted image features (for Chrome extension with feature caching).

**Endpoint**: `/api/search/features`

**Method**: POST

**Content-Type**: application/json

**Request Body**:

```json
{
  "features": [0.123, -0.456, 0.789, ...],
  "limit": 8,
  "threshold": 0.2
}
```

**Parameters**:

| Parameter  | Type    | Required | Default | Description |
|------------|---------|----------|---------|-------------|
| features   | array   | Yes      | -       | Array of extracted image features |
| limit      | number  | No       | 8       | Maximum number of results to return |
| threshold  | number  | No       | 0.2     | Minimum similarity score (0-1) for results |

**Response**: Same as `/api/search/upload` endpoint.

### 4. Get All Product Features

Retrieve all products with their pre-extracted features (for caching in extension).

**Endpoint**: `/api/products/features`

**Method**: GET

**Response**:

```json
{
  "products": [
    {
      "id": "product123",
      "name": "Elegant Sofa",
      "price": 1299.99,
      "imageURL": "https://example.com/sofa.jpg",
      "category": "Sofas",
      "productURL": "https://psaj-localova.vercel.app/product-details/product123",
      "imageFeatures": [0.123, -0.456, 0.789, ...],
      "updatedAt": 1695134562000,
      "featureVersion": "v3"
    },
    // Additional products with features...
  ],
  "timestamp": 1695134562000,
  "count": 128
}
```

### 5. Check for Product Updates

Check if product data has been updated since last cache.

**Endpoint**: `/api/products/check-updates`

**Method**: GET

**Query Parameters**:

| Parameter  | Type    | Required | Description |
|------------|---------|----------|-------------|
| lastUpdate | number  | No       | Timestamp of client's last update |

**Response**:

```json
{
  "lastServerUpdate": 1695134562000,
  "shouldRefresh": true,
  "currentProductCount": 128,
  "cachedProductCount": 125
}
```

## Chrome Extension Integration with Feature Caching

For optimal performance, the Chrome extension should:

1. Pre-extract and cache product features using the `/api/products/features` endpoint
2. Periodically check for updates with `/api/products/check-updates`
3. Use the cached features for immediate search results

### Implementation Steps:

#### 1. Pre-extract and Cache Product Features

```javascript
// In your extension's background script
async function cacheProductFeatures() {
  try {
    // Show loading notification
    chrome.notifications.create({
      type: 'basic',
      iconUrl: 'icon48.png',
      title: 'Localova Image Search',
      message: 'Downloading product features...',
      priority: 2
    });
    
    const response = await fetch('https://psaj-localova-production.up.railway.app/api/products/features');
    const data = await response.json();
    
    // Store in localStorage
    localStorage.setItem('localova_products', JSON.stringify(data.products));
    localStorage.setItem('localova_last_update', data.timestamp);
    
    // Show success notification
    chrome.notifications.create({
      type: 'basic',
      iconUrl: 'icon48.png',
      title: 'Localova Image Search',
      message: `Successfully cached ${data.count} products for instant search`,
      priority: 2
    });
    
    return data;
  } catch (error) {
    console.error('Error caching product features:', error);
    
    // Show error notification
    chrome.notifications.create({
      type: 'basic',
      iconUrl: 'icon48.png',
      title: 'Localova Image Search',
      message: 'Failed to cache product features. Please try again.',
      priority: 2
    });
    
    throw error;
  }
}
```

#### 2. Check for Product Updates

```javascript
// In your extension's background script
async function checkForProductUpdates() {
  try {
    const lastUpdate = localStorage.getItem('localova_last_update') || 0;
    
    const response = await fetch(
      `https://psaj-localova-production.up.railway.app/api/products/check-updates?lastUpdate=${lastUpdate}`
    );
    const data = await response.json();
    
    if (data.shouldRefresh) {
      // Show update notification
      chrome.notifications.create({
        type: 'basic',
        iconUrl: 'icon48.png',
        title: 'Localova Image Search',
        message: 'New products available! Click to update your cache.',
        priority: 2,
        buttons: [
          { title: 'Update Now' },
          { title: 'Later' }
        ]
      }, (notificationId) => {
        // Handle notification click/buttons
      });
    }
    
    return data;
  } catch (error) {
    console.error('Error checking for product updates:', error);
    return null;
  }
}
```

#### 3. Search Using Cached Features

```javascript
// In your extension's content script
async function searchWithCachedFeatures(imageFeatures) {
  // First try to use cached products
  const cachedProducts = JSON.parse(localStorage.getItem('localova_products') || '[]');
  
  if (cachedProducts.length > 0) {
    // Do local search with cached features
    const results = searchLocalProducts(imageFeatures, cachedProducts);
    
    // Immediately show results from local cache
    showSearchResults(results);
    
    // Then check for updates in the background
    checkForProductUpdates();
  } else {
    // If no cached products, fall back to API
    const formData = new FormData();
    formData.append('image', imageBlob, 'selected-area.png');
    
    const response = await fetch('https://psaj-localova-production.up.railway.app/api/search/upload', {
      method: 'POST',
      body: formData
    });
    
    const data = await response.json();
    showSearchResults(data.results);
    
    // Cache for next time
    cacheProductFeatures();
  }
}

// Local search implementation using cached features
function searchLocalProducts(queryFeatures, products, limit = 8, threshold = 0.2) {
  // Calculate similarities
  const similarities = products
    .map(product => {
      // Skip products without features
      if (!product.imageFeatures || product.error) return { product, similarity: 0 };
      
      // Calculate similarity with the same algorithm as server
      const similarity = enhancedSimilarity(queryFeatures, product.imageFeatures);
      return { product, similarity };
    })
    .filter(item => item.similarity > 0);
  
  // Calculate adaptive threshold (same as server implementation)
  const allSimilarities = similarities.map(item => item.similarity);
  const meanSimilarity = allSimilarities.reduce((a, b) => a + b, 0) / allSimilarities.length;
  const stdDev = Math.sqrt(
    allSimilarities.reduce((sq, n) => sq + Math.pow(n - meanSimilarity, 2), 0) / allSimilarities.length
  );
  
  const adaptiveThreshold = meanSimilarity + (0.5 * stdDev);
  const thresholdToUse = Math.max(threshold, adaptiveThreshold);
  
  // Filter, sort and return results
  const results = similarities
    .filter(item => item.similarity > thresholdToUse)
    .sort((a, b) => b.similarity - a.similarity)
    .slice(0, limit)
    .map(item => ({
      ...item.product,
      similarity: item.similarity.toFixed(3)
    }));
  
  return results;
}
```

## Error Handling

The API returns appropriate HTTP status codes for different error scenarios:

| Status Code | Description |
|-------------|-------------|
| 200         | Success     |
| 400         | Bad Request - Missing required parameters or invalid input |
| 500         | Internal Server Error - Server-side processing error |

Error responses follow this format:

```json
{
  "error": "Error message describing what went wrong"
}
```

## Technical Details

The API uses TensorFlow.js with MobileNet V3 (with fallback to V1) for feature extraction. Images are processed as follows:

1. The image is resized to 224x224 pixels
2. Image features are extracted using the MobileNet model
3. Similarity is calculated using an enhanced cosine similarity algorithm
4. Results are filtered based on an adaptive threshold

## Support

For technical support or questions about the API, please contact the development team.

---

Last updated: [Current Date]